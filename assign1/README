2015 Fall CS525 Programming Assignment 1 - Storage Manager
Due Date: 09/08/2015

Group Member:
WeiLun Zhao | A20329942 | wzhao32@hawk.iit.edu
Su Feng | A20338748 | sfeng14@hawk.iit.edu
Yuchen Tang | A20352138 | ytang34@hawk.iit.edu

Description：
The goal of this assignment is to implement a simple storage manager - a module that is capable of reading blocks from a file on disk into memory and writing blocks from memory to a file on disk. We implement all needed methods in storage_mgr.c according to interfaces listed in storage_mgr.h and use test_assign1_1.c to test it. The test result is all passed. 

Files Include：
README
Makefile - Building code
dberror.c -Not Modified 
dberror.h -Not Modified
storage_mgr.c - Storage Manager functions
storage_mgr.h -Not Modified
test_assign1_1.c -Custom test methods added 
test_helper.h -Not Modified

How to compile and test:
1.Open terminal and go to the assign1 folder
2.Type in: make (Makefile should be excucted correctly and output is shown below.)
3.Type in: ./storage_mgr (test_assign1_1.c should run and test against storage_mgr.c with no error.)
4.Type in: make clean (Files other than source files will get removed.)

Design Idea:

Makefile:
Our Makefile shows dependencies among all files. If any file is modified, just run "make" again, changes will be updated.
"make clean" helps us remove unwanted files thus we can commit and push only source files to repository.

storage_mgr.c 
Part 1: Manipulating page files
	We use fopen() and fwrite() to create a new page file with '\0' bytes. We use close() and remove() to close and destroy file respectively. "mgmtInfo" is used to store file descriptor. Return "RC_OK" if a method is succussfully called.	
	We did not use Hint1, as we calculate the total number of pages in the openPageFile() function and assign it to fHandle->totalNumPages. In this case, we can read not only those newly created files by our createPageFile() function, but also existing files. If we reserve few space to store total number of pages, then we can only assume the first few bytes is not data but information of the file when call read function. It will cause problem when read existing files, since files created by others will not reserve space at the beginning of the file. I think our solution is better than Hint1.

Part 2: Read block
	We use lseek() to set the file position of the stream to the given offset and use read() to read the information from file to memory pointed to by the memPage page-handle.

Part 3:	Write block
	We use lseek() to set the offset of the writing and write() to write bytes into the page file. As the file descriptor is opened in read/write mode. We append the file by fopen() the file in append mode and write '\0' bytes to the end to the 	file while increasing totalnumberpages. The ensurecapacity() is called in the writeblock method.

test_assign1_1.c
	We add two new test cases:testMultiplePageContent() and testWrite() to test other functions not included in the original test file. We also use free() to free memory space used by malloc


  





